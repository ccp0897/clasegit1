/*******************************************************************************/
/* PAQUETE DONDE EN CUYAS ESTRUCTURAS SE ALMACENARAN LOS PRESTAMOS AFECTADOS   */
/* POR UNA ORDEN INSERT O UPDATE SOBRE LA TABLA PRESTAMOS                    */
/*******************************************************************************/
CREATE OR REPLACE PACKAGE PACKCONTROLPRESTAMO AS
  TYPE T_TABLAPRESTAMO IS TABLE OF SOCIO.IDSOCIO%TYPE
       INDEX BY BINARY_INTEGER;
  DATOSPRESTAMO T_TABLAPRESTAMO;  
  NUMPRESTAMOS BINARY_INTEGER:=0;
END;
/
/************************************************************************************/
CREATE OR REPLACE TRIGGER ANOTARDATOSPRESTAMOS
BEFORE INSERT OR UPDATE ON PRESTAMO
FOR EACH ROW
DECLARE
  I BINARY_INTEGER;
BEGIN
  PACKCONTROLPRESTAMO.NUMPRESTAMOS:=PACKCONTROLPRESTAMO.NUMPRESTAMOS+1;
  I:=PACKCONTROLPRESTAMO.NUMPRESTAMOS;
  PACKCONTROLPRESTAMO.DATOSPRESTAMO(I):=:NEW.IDSOCIO;
  IF :NEW.FECHAPRESTAMO IS NULL THEN
     :NEW.FECHAPRESTAMO:=SYSDATE;
  END IF;
  :NEW.FECHALIMITEDEVOLUCION:=GETFECHADEVOLUCION(:NEW.FECHAPRESTAMO);
END;
/
/********************************************************************************/
/* DISPARADOR QUE CONTROLA QUE NO SE PRESTEN DOS EJEMPLARES DE UN MISMO LIBRO   */
/* A UN MISMO SOCIO.     TAMBIEN IMPIDE QUE UN SOCIO PENALIZADO HAGA UN PRESTAMO                */
/********************************************************************************/
CREATE OR REPLACE TRIGGER CONTROLPRESTAMO
AFTER INSERT OR UPDATE ON PRESTAMO
DECLARE
 N NUMBER:=0;
 EJ EJEMPLAR.IDEJEMPLAR%TYPE; -- EJEMPLAR EN PROCESO
 SOC SOCIO.IDSOCIO%TYPE; --SOCIO EN PROCESO;
 V_LIMITEPENALIZACION DATE;
 V_LIBROSSINDEVOLVER NUMBER;
 V_ISBN LIBRO.ISBN%TYPE;
 V_TITULOLIBRO LIBRO.TITULO%TYPE;
BEGIN
  FOR I IN 1..PACKCONTROLPRESTAMO.NUMPRESTAMOS LOOP
    SOC:=PACKCONTROLPRESTAMO.DATOSPRESTAMO(I);

	SELECT COUNT(*)
	INTO V_LIBROSSINDEVOLVER
	FROM PRESTAMO              -- CONTROL DE LIBROS SIN DEVOLVER
	WHERE IDSOCIO=SOC
	AND TRUNC(FECHALIMITEDEVOLUCION)<TRUNC(SYSDATE);
	IF V_LIBROSSINDEVOLVER!=0 THEN
	 PACKCONTROLPRESTAMO.NUMPRESTAMOS:=0;
	 RAISE_APPLICATION_ERROR(-20002,'EL SOCIO Nº: '||SOC||' TIENE '||V_LIBROSSINDEVOLVER||' LIBROS FUERA DE PLAZ0 ');
	END IF;

    BEGIN
       SELECT LIMITEPENALIZACION
       INTO V_LIMITEPENALIZACION
       FROM SOCIOPENALIZADO
       WHERE IDSOCIO=SOC;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_LIMITEPENALIZACION:=NULL;
    END;
    IF V_LIMITEPENALIZACION IS NOT NULL AND ( TRUNC(SYSDATE) < TRUNC(V_LIMITEPENALIZACION)) THEN
                PACKCONTROLPRESTAMO.NUMPRESTAMOS:=0;
                RAISE_APPLICATION_ERROR(-20001,'EL SOCIO Nº:' || SOC || 'ESTA PENALIZADO HASTA: '||
                                                                                TO_CHAR( TRUNC(V_LIMITEPENALIZACION),'DD-MM-YY'));
    END IF;
    BEGIN
      SELECT J.ISBN,COUNT(E.IDEJEMPLAR) -- Si la select no devuelve nada--> prestamo correcto.
      INTO V_ISBN,N                     
      FROM PRESTAMO E,EJEMPLAR J,LIBRO L
      WHERE E.IDEJEMPLAR=J.IDEJEMPLAR
      AND J.ISBN=L.ISBN
      AND E.IDSOCIO=SOC
      GROUP BY J.ISBN
      HAVING COUNT(E.IDEJEMPLAR)>1;
    EXCEPTION                            -- pero hay que controlar la excepcion. No hacemos nada.
      WHEN NO_DATA_FOUND THEN
         NULL;
    END;  
    IF N>1 THEN  -- POR SER UN DISPARADOR AFTER LA CONDICION DEBE SER >1
      SELECT TITULO
      INTO V_TITULOLIBRO
      FROM LIBRO
      WHERE ISBN=V_ISBN;
      PACKCONTROLPRESTAMO.NUMPRESTAMOS:=0;
      RAISE_APPLICATION_ERROR(-20000,'EL SOCIO Nº:' || SOC ||
                                     ' TIENE UN EJEMPLAR DEL LIBRO: "'||V_TITULOLIBRO||'" EN PRESTAMO');    
    END IF;
  END LOOP;
  PACKCONTROLPRESTAMO.NUMPRESTAMOS:=0;
END;
/

/***********************************************************************************/
CREATE OR REPLACE TRIGGER ANOTARDEVOLUCION
AFTER DELETE ON PRESTAMO
FOR EACH ROW
DECLARE
  V_FECHADEV DATE;
BEGIN
  INSERT INTO DEVOLUCION VALUES(:OLD.IDEJEMPLAR,:OLD.IDSOCIO,:OLD.FECHAPRESTAMO,SYSDATE);
  V_FECHADEV:=TRUNC(:OLD.FECHALIMITEDEVOLUCION);
  IF V_FECHADEV<TRUNC(SYSDATE) THEN
    UPDATE SOCIOPENALIZADO 
    SET LIMITEPENALIZACION = SYSDATE+15
    WHERE IDSOCIO=:OLD.IDSOCIO;
     IF SQL%NOTFOUND THEN
         INSERT INTO SOCIOPENALIZADO VALUES(:OLD.IDSOCIO,SYSDATE+15);
     END IF;
  END IF;
END;
/
/************************************************************************************/







